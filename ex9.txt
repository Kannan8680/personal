Ex. No.: 9

DEADLOCK AVOIDANCE
Aim:
To find out a safe sequence using Bankerâ€™s algorithm for deadlock avoidance.


#include <stdio.h>
#include <stdbool.h>

#define P 5  // Number of processes
#define R 3  // Number of resource types

void calculateNeed(int need[P][R], int max[P][R], int alloc[P][R]) {
    for (int i = 0; i < P; i++) {
        for (int j = 0; j < R; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }
}

bool isSafe(int processes[], int avail[], int max[][R], int alloc[][R]) {
    int need[P][R];
    calculateNeed(need, max, alloc);

    bool finish[P] = {false};
    int safeSeq[P];
    int work[R];

    // Initialize work as available resources
    for (int i = 0; i < R; i++)
        work[i] = avail[i];

    int count = 0;
    while (count < P) {
        bool found = false;
        for (int p = 0; p < P; p++) {
            if (!finish[p]) {
                bool canAllocate = true;
                for (int r = 0; r < R; r++) {
                    if (need[p][r] > work[r]) {
                        canAllocate = false;
                        break;
                    }
                }

                if (canAllocate) {
                    for (int r = 0; r < R; r++)
                        work[r] += alloc[p][r];

                    safeSeq[count++] = p;
                    finish[p] = true;
                    found = true;
                }
            }
        }

        if (!found) {
            // No process could be allocated safely
            return false;
        }
    }

    // Print safe sequence
    printf("System is in a safe state.\nSafe sequence is: ");
    for (int i = 0; i < P; i++) {
        printf("P%d", safeSeq[i]);
        if (i != P - 1)
            printf(" -> ");
    }
    printf("\n");
    return true;
}

int main() {
    int processes[P] = {0, 1, 2, 3, 4};

    int avail[R] = {3, 3, 2}; // Available resources

    int max[P][R] = {
        {7, 5, 3},
        {3, 2, 2},
        {9, 0, 2},
        {2, 2, 2},
        {4, 3, 3}
    };

    int alloc[P][R] = {
        {0, 1, 0},
        {2, 0, 0},
        {3, 0, 2},
        {2, 1, 1},
        {0, 0, 2}
    };

    if (!isSafe(processes, avail, max, alloc)) {
        printf("System is NOT in a safe state. Deadlock may occur.\n");
    }

    return 0;
}


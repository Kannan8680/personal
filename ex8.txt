Ex. No.: 8

PRODUCER CONSUMER USING SEMAPHORES
Aim: To write a program to implement solution to producer consumer problem using semaphores.

#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define MAX_BUFFER 5

int buffer[MAX_BUFFER];
int in = 0;    // Index for next produced item
int out = 0;   // Index for next consumed item

sem_t empty;   // Semaphore counting empty slots
sem_t full;    // Semaphore counting full slots
pthread_mutex_t mutex;  // Mutex for mutual exclusion

void* producer(void* arg) {
    int item, i;
    for (i = 0; i < 10; i++) {
        item = i + 1; // Produce an item (e.g., sequential integers)

        sem_wait(&empty);         // Wait for empty slot
        pthread_mutex_lock(&mutex);  // Enter critical section

        buffer[in] = item;
        printf("Producer produced: %d at buffer[%d]\n", item, in);
        in = (in + 1) % MAX_BUFFER;

        pthread_mutex_unlock(&mutex);  // Exit critical section
        sem_post(&full);            // Signal full slot

        sleep(1);  // Simulate time to produce
    }
    pthread_exit(NULL);
}

void* consumer(void* arg) {
    int item, i;
    for (i = 0; i < 10; i++) {
        sem_wait(&full);           // Wait for full slot
        pthread_mutex_lock(&mutex);  // Enter critical section

        item = buffer[out];
        printf("Consumer consumed: %d from buffer[%d]\n", item, out);
        out = (out + 1) % MAX_BUFFER;

        pthread_mutex_unlock(&mutex);  // Exit critical section
        sem_post(&empty);           // Signal empty slot

        sleep(2);  // Simulate time to consume
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t prodThread, consThread;

    // Initialize semaphores
    sem_init(&empty, 0, MAX_BUFFER);  // Initially buffer is empty, so all slots are empty
    sem_init(&full, 0, 0);            // Initially no items produced
    pthread_mutex_init(&mutex, NULL);

    // Create producer and consumer threads
    pthread_create(&prodThread, NULL, producer, NULL);
    pthread_create(&consThread, NULL, consumer, NULL);

    // Wait for threads to finish
    pthread_join(prodThread, NULL);
    pthread_join(consThread, NULL);

    // Destroy semaphores and mutex
    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    printf("Producer-Consumer execution completed.\n");

    return 0;
}

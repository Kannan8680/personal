Ex. No.: 6a)

FIRST COME FIRST SERVE
Aim:
To implement First-come First- serve (FCFS) scheduling technique


// Filename: fcfs.c

#include <stdio.h>

int main() {
    int n, i;
    int burstTime[20], waitingTime[20], turnAroundTime[20];
    float avgWT = 0, avgTAT = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter burst time for each process:\n");
    for (i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &burstTime[i]);
    }

    waitingTime[0] = 0;  // First process has zero waiting time

    for (i = 1; i < n; i++) {
        waitingTime[i] = waitingTime[i - 1] + burstTime[i - 1];
    }

    for (i = 0; i < n; i++) {
        turnAroundTime[i] = waitingTime[i] + burstTime[i];
        avgWT += waitingTime[i];
        avgTAT += turnAroundTime[i];
    }

    avgWT /= n;
    avgTAT /= n;

    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\n", i + 1, burstTime[i], waitingTime[i], turnAroundTime[i]);
    }

    printf("\nAverage Waiting Time: %.2f", avgWT);
    printf("\nAverage Turnaround Time: %.2f\n", avgTAT);

    return 0;
}

-----------------------------------------------------------
Ex. No.: 6b)

SHORTEST JOB FIRST
Aim:
To implement the Shortest Job First (SJF) scheduling technique


// Filename: sjf.c

#include <stdio.h>

int main() {
    int n, i, j, temp;
    int process[20], burstTime[20], waitingTime[20], turnAroundTime[20];
    float avgWT = 0, avgTAT = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter burst time for each process:\n");
    for (i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &burstTime[i]);
        process[i] = i + 1;
    }

    // Sort by burst time (SJF)
    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            if (burstTime[i] > burstTime[j]) {
                // Swap burst time
                temp = burstTime[i];
                burstTime[i] = burstTime[j];
                burstTime[j] = temp;

                // Swap process number
                temp = process[i];
                process[i] = process[j];
                process[j] = temp;
            }
        }
    }

    waitingTime[0] = 0;

    for (i = 1; i < n; i++) {
        waitingTime[i] = waitingTime[i - 1] + burstTime[i - 1];
    }

    for (i = 0; i < n; i++) {
        turnAroundTime[i] = waitingTime[i] + burstTime[i];
        avgWT += waitingTime[i];
        avgTAT += turnAroundTime[i];
    }

    avgWT /= n;
    avgTAT /= n;

    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\n", process[i], burstTime[i], waitingTime[i], turnAroundTime[i]);
    }

    printf("\nAverage Waiting Time: %.2f", avgWT);
    printf("\nAverage Turnaround Time: %.2f\n", avgTAT);

    return 0;
}

-----------------------------------------------------------
Ex. No.: 6c)

PRIORITY SCHEDULING
Aim:
To implement priority scheduling technique

// Filename: priority.c

#include <stdio.h>

int main() {
    int n, i, j, temp;
    int process[20], burstTime[20], priority[20], waitingTime[20], turnAroundTime[20];
    float avgWT = 0, avgTAT = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    for (i = 0; i < n; i++) {
        printf("Enter burst time and priority (lower number = higher priority) for process %d: ", i + 1);
        scanf("%d %d", &burstTime[i], &priority[i]);
        process[i] = i + 1;
    }

    // Sort by priority
    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            if (priority[i] > priority[j]) {
                // Swap priority
                temp = priority[i];
                priority[i] = priority[j];
                priority[j] = temp;

                // Swap burst time
                temp = burstTime[i];
                burstTime[i] = burstTime[j];
                burstTime[j] = temp;

                // Swap process
                temp = process[i];
                process[i] = process[j];
                process[j] = temp;
            }
        }
    }

    waitingTime[0] = 0;

    for (i = 1; i < n; i++) {
        waitingTime[i] = waitingTime[i - 1] + burstTime[i - 1];
    }

    for (i = 0; i < n; i++) {
        turnAroundTime[i] = waitingTime[i] + burstTime[i];
        avgWT += waitingTime[i];
        avgTAT += turnAroundTime[i];
    }

    avgWT /= n;
    avgTAT /= n;

    printf("\nProcess\tBT\tPriority\tWT\tTAT\n");
    for (i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t\t%d\t%d\n", process[i], burstTime[i], priority[i], waitingTime[i], turnAroundTime[i]);
    }

    printf("\nAverage Waiting Time: %.2f", avgWT);
    printf("\nAverage Turnaround Time: %.2f\n", avgTAT);

    return 0;
}

-----------------------------------------------------------
Ex. No.: 6d)

ROUND ROBIN SCHEDULING
Aim:
To implement the Round Robin (RR) scheduling technique


// Filename: roundrobin.c

#include <stdio.h>

int main() {
    int n, i, timeQuantum;
    int burstTime[20], remTime[20], waitingTime[20], turnaroundTime[20];
    int t = 0; // Current time
    int completed = 0;
    float avgWT = 0, avgTAT = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter burst time for each process:\n");
    for (i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &burstTime[i]);
        remTime[i] = burstTime[i];
    }

    printf("Enter time quantum: ");
    scanf("%d", &timeQuantum);

    while (completed < n) {
        for (i = 0; i < n; i++) {
            if (remTime[i] > 0) {
                if (remTime[i] > timeQuantum) {
                    t += timeQuantum;
                    remTime[i] -= timeQuantum;
                } else {
                    t += remTime[i];
                    waitingTime[i] = t - burstTime[i];
                    remTime[i] = 0;
                    completed++;
                }
            }
        }
    }

    for (i = 0; i < n; i++) {
        turnaroundTime[i] = burstTime[i] + waitingTime[i];
        avgWT += waitingTime[i];
        avgTAT += turnaroundTime[i];
    }

    avgWT /= n;
    avgTAT /= n;

    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\t\t%d\n", i + 1, burstTime[i], waitingTime[i], turnaroundTime[i]);
    }

    printf("\nAverage Waiting Time: %.2f", avgWT);
    printf("\nAverage Turnaround Time: %.2f\n", avgTAT);

    return 0;
}
